public class Solution {
    public boolean isPresent(TreeNode node,int n1){
        if(node==null){
            return false;
        }
        if(node.val==n1){
            return true;
        }
        return (isPresent(node.left,n1)||isPresent(node.right,n1));
    }
    public int lca(TreeNode node, int n1, int n2) {
        // Base case 
        if (node == null){ 
            return -1;
        }
        //check if any of the nodes is absent then return -1.
        if(!isPresent(node,n1)||!isPresent(node,n2)){
                return -1;
        }
        return lachelper(node,n1,n2);
      } 
    public int lachelper(TreeNode node,int n1,int n2){
        if (node == null){ 
            return -1;
        }
        // If either n1 or n2 matches with root's key, report 
        // the presence by returning root (Note that if a key is 
        // ancestor of other, then the ancestor key becomes LCA 
        if (node.val == n1 || node.val == n2) 
            return node.val; 
  
        // Look for keys in left and right subtrees 
        int left_lca = lachelper(node.left, n1, n2); 
        int right_lca = lachelper(node.right, n1, n2); 
  
        // If both of the above calls return Non-NULL, then one key 
        // is present in once subtree and other is present in other, 
        // So this node is the LCA 
        
        if (left_lca!=-1 && right_lca!=-1) 
            return node.val ; 
  
        // Otherwise check if left subtree or right subtree is LCA 
        return (left_lca != -1) ? left_lca : right_lca; 
    }
    
}
